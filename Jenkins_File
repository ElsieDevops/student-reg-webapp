@Library('JenkinsSharedLib')_
pipeline {
    agent any
    triggers {
  githubPush()
    }
    options {
  buildDiscarder logRotator(numToKeepStr: '5')
  disableConcurrentBuilds()
  timeout(time: 10,unit: 'MINUTES')
 }
    environment{
        SONARQUBE_Token = credentials('SonarToken')
        SONARQUBE_Host = "https://35.175.188.99:9000"
        TomcatSystemIP = "34.203.248.39"
        TomcatserverSSHUserName = "ec2-user"
    }
    tools {
        maven "maven-3.9.11"
    }
    stages{
        
        stage("Git clone"){
          steps {git branch: 'development', changelog: true, credentialsId: 'Github_Credentials', poll: true, url: 'https://github.com/ElsieDevops/student-reg-webapp.git'}  
        }
    
        stage("Build stage"){
        steps {            
                sh "mvn clean package"                   
        }
      }
        stage("Sonar scan"){
        steps {
             sh "mvn clean verify sonar:sonar -Dsonar.host=${SONARQUBE_Host} -Dsonar.token=${SONARQUBE_Token}"
            }
      }
        stage("Upload to nexus"){
        steps {
              sh "mvn clean deploy"
            }
      }
        stage("deploy war to dev tomcat"){
            when {
                expression { env.BRANCH_NAME == "development" }
            }
        steps {
            sshagent(['Tomcat_server_SSHCredentials']) {
              sh "scp -o StrictHostKeyChecking=no target/student-reg-webapp.war ${TomcatserverSSHUserName}@${TomcatSystemIP}:/opt/tomcat/webapps/student-reg-webapp.war"
          }
       }
    }
         stage("deploy to qa tomcat"){
            when {
                expression { env.BRANCH_NAME == "qa" }
            }
        steps {
            sshagent(['Tomcat_server_SSHCredentials']) {
              sh "scp -o StrictHostKeyChecking=no target/student-reg-webapp.war ${TomcatserverSSHUserName}@${TomcatSystemIP}:/opt/tomcat/webapps/student-reg-webapp.war"
          }
       }
    }
        stage("deploy to main tomcat"){
            when {
                expression { env.BRANCH_NAME == "main" }
            }
        steps {
            sshagent(['Tomcat_server_SSHCredentials']) {
              sh "scp -o StrictHostKeyChecking=no target/student-reg-webapp.war ${TomcatserverSSHUserName}@${TomcatSystemIP}:/opt/tomcat/webapps/student-reg-webapp.war"
          }
       }
        stage("Trigger test job") {
            steps{
                script{
                    build wait: false, job: 'student-reg-webapp-testing'
                }
            }
        }
    }
  } 
  post {
        always {
            SendEmailNotification(currentBuild.currentResult, "okuelsie@gmail.com")
        cleanWs()
        }
    }
 }

    